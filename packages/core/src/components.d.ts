/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { DiscordTimestamp } from "./util";
export namespace Components {
    interface DiscordAttachment {
        /**
          * The alt text to show in case the image was unable to load
          * @default 'discord attachment'
         */
        "alt": string;
        /**
          * The height of the image in pixels
          * @remark For images over 200 pixels the height is multiplied by 0.2 (20% of the total height) This is to ensure that it doesn't supersize. The size at which the height should be modified can be set by `heightModifierSize`
         */
        "height": number;
        /**
          * The max size at which the height will be modified to be only 20% of the total given amount If you would like to disable resizing of the image then set this to `null`
          * @default 200
         */
        "heightModifierSize": number | null;
        /**
          * The URL for the image attachment
          * @important Should be a valid image URL, i.e. matching the regex `/\.(bmp|jpe?g|png|gif|webp|tiff)$/i`
         */
        "url": string;
        /**
          * The width of the image in pixels
          * @remark For images over 200 pixels the width is multiplied by 0.2 (20% of the total width) This is to ensure that it doesn't supersize. The size at which the width should be modified can be set by `widthModifierSize`
         */
        "width": number;
        /**
          * The max size at which the width will be modified to be only 20% of the total given amount If you would like to disable resizing of the image then set this to `null`
          * @default 200
         */
        "widthModifierSize": number | null;
    }
    interface DiscordEmbed {
        /**
          * The author's avatar URL.
         */
        "authorImage": string;
        /**
          * The author's name.
         */
        "authorName": string;
        /**
          * The URL to open when you click on the author's name.
         */
        "authorUrl": string;
        /**
          * The color to use for the embed's left border. Can be any [CSS color value](https://www.w3schools.com/cssref/css_colors_legal.asp).
         */
        "color": string;
        /**
          * The embed title.
         */
        "embedTitle": string;
        /**
          * The image to use next to the footer text.
         */
        "footerImage": string;
        /**
          * The embed image to use (displayed at the bottom).
         */
        "image": string;
        /**
          * The provider to show above the embed, for example for YouTube videos it will show "YouTube" at the top of the embed (above the author)
          * @example YouTube
         */
        "provider": string;
        /**
          * The thumbnail image to use.
         */
        "thumbnail": string;
        /**
          * The timestamp to use for the message date. When supplying a string, the format must be `01/31/2000`.
         */
        "timestamp"?: DiscordTimestamp;
        /**
          * The URL to open when you click on the embed title.
         */
        "url": string;
        /**
          * The embed video to use (displayed at the bottom, same slot as the image).
          * @important YouTube videos will not be playable on your projects, this is due to YouTube using DASH to play their videos rather than providing the raw media stream (in a container such as mp4 or ogg). Links to regular MP4 files (such as on a CDN) however will autoplay!
          * @note Video takes priority over image.
          * @remark Providing both a video and an image will ensure the image is shown to users with browsers that do not support HTML5 video playback.
          * @example https://download.blender.org/peach/bigbuckbunny_movies/big_buck_bunny_1080p_stereo.ogg
         */
        "video": string;
    }
    interface DiscordEmbedField {
        /**
          * The field's title.
         */
        "fieldTitle": string;
        /**
          * Whether this field should be displayed inline or not.
         */
        "inline": boolean;
        /**
          * The index of this inline field
          * @remark This defines the position of this inline field. 1 is left, 2 is middle and 3 is right.
          * @oneof [1, 2, 3]
          * @default 1
         */
        "inlineIndex": number;
    }
    interface DiscordEmbedFields {
    }
    interface DiscordMention {
        /**
          * The color to use for this mention. Only works for role mentions and must be in hex format.
         */
        "color": string;
        /**
          * Whether this entire message block should be highlighted (to emulate the "logged in user" being pinged).
         */
        "highlight": boolean;
        /**
          * The type of mention this should be. This will prepend the proper prefix character. Valid values: `user`, `channel`, `role`
         */
        "type": string;
    }
    interface DiscordMessage {
        /**
          * The message author's username.
          * @default 'User'
         */
        "author": string;
        /**
          * The message author's avatar. Can be an avatar shortcut, relative path, or external link.
         */
        "avatar": string;
        /**
          * Whether the message author is a bot or not.
         */
        "bot": boolean;
        /**
          * Whether the message has been edited or not.
         */
        "edited": boolean;
        /**
          * The id of the profile data to use.
         */
        "profile": string;
        /**
          * The message author's primary role color. Can be any {@link https://www.w3schools.com/cssref/css_colors_legal.asp CSS color value}.
         */
        "roleColor": string;
        /**
          * The timestamp to use for the message date. When supplying a string, the format must be `01/31/2000`.
         */
        "timestamp": DiscordTimestamp;
        /**
          * Whether the bot is verified or not.
         */
        "verified": boolean;
    }
    interface DiscordMessages {
        /**
          * Whether to use compact mode or not.
         */
        "compactMode": boolean;
        /**
          * Whether to use light theme or not.
         */
        "lightTheme": boolean;
        /**
          * Whether to exclude the background or not.
         */
        "noBackground": boolean;
    }
}
declare global {
    interface HTMLDiscordAttachmentElement extends Components.DiscordAttachment, HTMLStencilElement {
    }
    var HTMLDiscordAttachmentElement: {
        prototype: HTMLDiscordAttachmentElement;
        new (): HTMLDiscordAttachmentElement;
    };
    interface HTMLDiscordEmbedElement extends Components.DiscordEmbed, HTMLStencilElement {
    }
    var HTMLDiscordEmbedElement: {
        prototype: HTMLDiscordEmbedElement;
        new (): HTMLDiscordEmbedElement;
    };
    interface HTMLDiscordEmbedFieldElement extends Components.DiscordEmbedField, HTMLStencilElement {
    }
    var HTMLDiscordEmbedFieldElement: {
        prototype: HTMLDiscordEmbedFieldElement;
        new (): HTMLDiscordEmbedFieldElement;
    };
    interface HTMLDiscordEmbedFieldsElement extends Components.DiscordEmbedFields, HTMLStencilElement {
    }
    var HTMLDiscordEmbedFieldsElement: {
        prototype: HTMLDiscordEmbedFieldsElement;
        new (): HTMLDiscordEmbedFieldsElement;
    };
    interface HTMLDiscordMentionElement extends Components.DiscordMention, HTMLStencilElement {
    }
    var HTMLDiscordMentionElement: {
        prototype: HTMLDiscordMentionElement;
        new (): HTMLDiscordMentionElement;
    };
    interface HTMLDiscordMessageElement extends Components.DiscordMessage, HTMLStencilElement {
    }
    var HTMLDiscordMessageElement: {
        prototype: HTMLDiscordMessageElement;
        new (): HTMLDiscordMessageElement;
    };
    interface HTMLDiscordMessagesElement extends Components.DiscordMessages, HTMLStencilElement {
    }
    var HTMLDiscordMessagesElement: {
        prototype: HTMLDiscordMessagesElement;
        new (): HTMLDiscordMessagesElement;
    };
    interface HTMLElementTagNameMap {
        "discord-attachment": HTMLDiscordAttachmentElement;
        "discord-embed": HTMLDiscordEmbedElement;
        "discord-embed-field": HTMLDiscordEmbedFieldElement;
        "discord-embed-fields": HTMLDiscordEmbedFieldsElement;
        "discord-mention": HTMLDiscordMentionElement;
        "discord-message": HTMLDiscordMessageElement;
        "discord-messages": HTMLDiscordMessagesElement;
    }
}
declare namespace LocalJSX {
    interface DiscordAttachment {
        /**
          * The alt text to show in case the image was unable to load
          * @default 'discord attachment'
         */
        "alt"?: string;
        /**
          * The height of the image in pixels
          * @remark For images over 200 pixels the height is multiplied by 0.2 (20% of the total height) This is to ensure that it doesn't supersize. The size at which the height should be modified can be set by `heightModifierSize`
         */
        "height"?: number;
        /**
          * The max size at which the height will be modified to be only 20% of the total given amount If you would like to disable resizing of the image then set this to `null`
          * @default 200
         */
        "heightModifierSize"?: number | null;
        /**
          * The URL for the image attachment
          * @important Should be a valid image URL, i.e. matching the regex `/\.(bmp|jpe?g|png|gif|webp|tiff)$/i`
         */
        "url"?: string;
        /**
          * The width of the image in pixels
          * @remark For images over 200 pixels the width is multiplied by 0.2 (20% of the total width) This is to ensure that it doesn't supersize. The size at which the width should be modified can be set by `widthModifierSize`
         */
        "width"?: number;
        /**
          * The max size at which the width will be modified to be only 20% of the total given amount If you would like to disable resizing of the image then set this to `null`
          * @default 200
         */
        "widthModifierSize"?: number | null;
    }
    interface DiscordEmbed {
        /**
          * The author's avatar URL.
         */
        "authorImage"?: string;
        /**
          * The author's name.
         */
        "authorName"?: string;
        /**
          * The URL to open when you click on the author's name.
         */
        "authorUrl"?: string;
        /**
          * The color to use for the embed's left border. Can be any [CSS color value](https://www.w3schools.com/cssref/css_colors_legal.asp).
         */
        "color"?: string;
        /**
          * The embed title.
         */
        "embedTitle"?: string;
        /**
          * The image to use next to the footer text.
         */
        "footerImage"?: string;
        /**
          * The embed image to use (displayed at the bottom).
         */
        "image"?: string;
        /**
          * The provider to show above the embed, for example for YouTube videos it will show "YouTube" at the top of the embed (above the author)
          * @example YouTube
         */
        "provider"?: string;
        /**
          * The thumbnail image to use.
         */
        "thumbnail"?: string;
        /**
          * The timestamp to use for the message date. When supplying a string, the format must be `01/31/2000`.
         */
        "timestamp"?: DiscordTimestamp;
        /**
          * The URL to open when you click on the embed title.
         */
        "url"?: string;
        /**
          * The embed video to use (displayed at the bottom, same slot as the image).
          * @important YouTube videos will not be playable on your projects, this is due to YouTube using DASH to play their videos rather than providing the raw media stream (in a container such as mp4 or ogg). Links to regular MP4 files (such as on a CDN) however will autoplay!
          * @note Video takes priority over image.
          * @remark Providing both a video and an image will ensure the image is shown to users with browsers that do not support HTML5 video playback.
          * @example https://download.blender.org/peach/bigbuckbunny_movies/big_buck_bunny_1080p_stereo.ogg
         */
        "video"?: string;
    }
    interface DiscordEmbedField {
        /**
          * The field's title.
         */
        "fieldTitle": string;
        /**
          * Whether this field should be displayed inline or not.
         */
        "inline"?: boolean;
        /**
          * The index of this inline field
          * @remark This defines the position of this inline field. 1 is left, 2 is middle and 3 is right.
          * @oneof [1, 2, 3]
          * @default 1
         */
        "inlineIndex"?: number;
    }
    interface DiscordEmbedFields {
    }
    interface DiscordMention {
        /**
          * The color to use for this mention. Only works for role mentions and must be in hex format.
         */
        "color"?: string;
        /**
          * Whether this entire message block should be highlighted (to emulate the "logged in user" being pinged).
         */
        "highlight"?: boolean;
        /**
          * The type of mention this should be. This will prepend the proper prefix character. Valid values: `user`, `channel`, `role`
         */
        "type"?: string;
    }
    interface DiscordMessage {
        /**
          * The message author's username.
          * @default 'User'
         */
        "author"?: string;
        /**
          * The message author's avatar. Can be an avatar shortcut, relative path, or external link.
         */
        "avatar"?: string;
        /**
          * Whether the message author is a bot or not.
         */
        "bot"?: boolean;
        /**
          * Whether the message has been edited or not.
         */
        "edited"?: boolean;
        /**
          * The id of the profile data to use.
         */
        "profile"?: string;
        /**
          * The message author's primary role color. Can be any {@link https://www.w3schools.com/cssref/css_colors_legal.asp CSS color value}.
         */
        "roleColor"?: string;
        /**
          * The timestamp to use for the message date. When supplying a string, the format must be `01/31/2000`.
         */
        "timestamp"?: DiscordTimestamp;
        /**
          * Whether the bot is verified or not.
         */
        "verified"?: boolean;
    }
    interface DiscordMessages {
        /**
          * Whether to use compact mode or not.
         */
        "compactMode"?: boolean;
        /**
          * Whether to use light theme or not.
         */
        "lightTheme"?: boolean;
        /**
          * Whether to exclude the background or not.
         */
        "noBackground"?: boolean;
    }
    interface IntrinsicElements {
        "discord-attachment": DiscordAttachment;
        "discord-embed": DiscordEmbed;
        "discord-embed-field": DiscordEmbedField;
        "discord-embed-fields": DiscordEmbedFields;
        "discord-mention": DiscordMention;
        "discord-message": DiscordMessage;
        "discord-messages": DiscordMessages;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "discord-attachment": LocalJSX.DiscordAttachment & JSXBase.HTMLAttributes<HTMLDiscordAttachmentElement>;
            "discord-embed": LocalJSX.DiscordEmbed & JSXBase.HTMLAttributes<HTMLDiscordEmbedElement>;
            "discord-embed-field": LocalJSX.DiscordEmbedField & JSXBase.HTMLAttributes<HTMLDiscordEmbedFieldElement>;
            "discord-embed-fields": LocalJSX.DiscordEmbedFields & JSXBase.HTMLAttributes<HTMLDiscordEmbedFieldsElement>;
            "discord-mention": LocalJSX.DiscordMention & JSXBase.HTMLAttributes<HTMLDiscordMentionElement>;
            "discord-message": LocalJSX.DiscordMessage & JSXBase.HTMLAttributes<HTMLDiscordMessageElement>;
            "discord-messages": LocalJSX.DiscordMessages & JSXBase.HTMLAttributes<HTMLDiscordMessagesElement>;
        }
    }
}
